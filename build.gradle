/*
   Copyright 2019 Matt Fischer <mfish2011@gmail.com>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    //TODO:add build plugins and libraries to the classpath
  }
}

apply plugin: 'java'

allprojects {
  repositories {
    mavenLocal()
    mavenCentral()
  }
  
  apply plugin: 'java'
  
}

subprojects {

	configurations {
		ecj
	}

  //configure plugins by project type
  if(project.name.endsWith('-api')) {
  	//configure project for library/api build
  	apply plugin: 'java-library'
  	
  } else if(project.name.endsWith('-app')) {
  	//configure project for application build
  	apply plugin: 'application'
  	
  } else if(project.name.endsWith('-plugin')) {
  	//configure project for Gradle plugin build
  	apply plugin: 'java-gradle-plugin'
  }

  group = "setools"

  dependencies {
    //compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
    //compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
    //compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
		ecj 'org.eclipse.jdt.core.compiler:ecj:4.6.1'
		testCompile 'junit:junit:4.12'
		testCompile gradleApi()
  }

  	configurations {
		ecj
	}
	
	compileJava {
		options.fork = true
		options.forkOptions.with {
			executable = 'java'
			jvmArgs = ['-classpath', project.configurations.ecj.asPath, 'org.eclipse.jdt.internal.compiler.batch.Main', '-nowarn']
		}
	}
	
	compileTestJava {
		options.fork = true
		options.forkOptions.with {
			executable = 'java'
			jvmArgs = ['-classpath', project.configurations.ecj.asPath, 'org.eclipse.jdt.internal.compiler.batch.Main', '-nowarn']
		}
	}
	
	//turn off compiling javadoc
	tasks.withType(Javadoc).all { enabled = false }
	
	test {
    	dependsOn cleanTest
    	testLogging.showStandardStreams = true
    }
}

/**
 * Copyright 2021 M. Fischer <mfisch2011@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id "setools.base-conventions"
    id "java"
    id "jacoco"
    id "com.github.spotbugs"
}

group = "setools"

dependencies {
    constraints {
        
    }

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

tasks.named("test") {
    useJUnitPlatform()
}


task sourceJar(type: Jar) {
  classifier = "sources"
  from sourceSets.main.allJava
}

task packageJavadoc(type: Jar) {
    from javadoc
    classifier = "javadoc"
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact packageJavadoc
        }
    }
}

javadoc {
  source = sourceSets.main.allJava
  classpath = configurations.compileClasspath
  enabled = false
  
  options
  {
    setMemberLevel JavadocMemberLevel.PUBLIC
    setAuthor true
    links "https://docs.oracle.com/javase/8/docs/api/"
  }
}

spotbugsMain {
    reports {
        html.enabled = true
    }
}

/*************************************************************
 TODO: HOW TO CONSLIDATE THIS CRAP INTO AN INIT SCRIPT!!!!!
*************************************************************/
configurations { ecj }

dependencies {
    ecj "org.eclipse.jdt.core.compiler:ecj:4.6.1"
}

tasks.withType(JavaCompile) {
  options.encoding = "utf-8"
  options.headerOutputDirectory.convention(null)
  options.fork = true
  doFirst {
    options.forkOptions.with {
      executable = "java"
      jvmArgs = [ "-cp", configurations.ecj.asPath, "org.eclipse.jdt.internal.compiler.batch.Main" ]
    }
  }
}